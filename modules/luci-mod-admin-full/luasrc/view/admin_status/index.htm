<%#
 Copyright 2008 Steven Barth <steven@midlink.org>
 Copyright 2008-2011 Jo-Philipp Wich <jow@openwrt.org>
 Licensed to the public under the Apache License 2.0.
-%>

<%
	local fs = require "nixio.fs"
	local ipc = require "luci.ip"
	local util = require "luci.util"
	local stat = require "luci.tools.status"
	local ver = require "luci.version"
	local devInfo = require "luci.deviceInfo"

	local has_ipv6 = fs.access("/proc/net/ipv6_route")
	local has_dhcp = fs.access("/etc/config/dhcp")
	local has_wifi = ((fs.stat("/etc/config/wireless", "size") or 0) > 0)

	local sysinfo = luci.util.ubus("system", "info") or { }
	local boardinfo = luci.util.ubus("system", "board") or { }
	local unameinfo = nixio.uname() or { }

	local meminfo = sysinfo.memory or {
		total = 0,
		free = 0,
		buffered = 0,
		shared = 0
	}

	local swapinfo = sysinfo.swap or {
		total = 0,
		free = 0
	}

	local has_dsl = fs.access("/etc/init.d/dsl_control")

	if luci.http.formvalue("status") == "1" then
		local ntm = require "luci.model.network".init()
		local wan = ntm:get_wannet()
		local wan6 = ntm:get_wan6net()

		local conn_count = tonumber(
			fs.readfile("/proc/sys/net/netfilter/nf_conntrack_count") or "") or 0

		local conn_max = tonumber(luci.sys.exec(
			"sysctl -n -e net.nf_conntrack_max net.ipv4.netfilter.ip_conntrack_max"
		):match("%d+")) or 4096

		local rv = {
			uptime     = sysinfo.uptime or 0,
			localtime  = os.date(),
			loadavg    = sysinfo.load or { 0, 0, 0 },
			memory     = meminfo,
			swap       = swapinfo,
			connmax    = conn_max,
			conncount  = conn_count,
			wifinets   = stat.wifi_networks(),
			mStats     = stat.getSimStatus()
		}

		if wan then
			local dev = wan:get_interface()
			local link = dev and ipc.link(dev:name())
			rv.wan = {
				ipaddr  = wan:ipaddr(),
				gwaddr  = wan:gwaddr(),
				netmask = wan:netmask(),
				dns     = wan:dnsaddrs(),
				expires = wan:expires(),
				uptime  = wan:uptime(),
				proto   = wan:proto(),
				i18n    = wan:get_i18n(),
				ifname  = wan:ifname(),
				link    = wan:adminlink(),
				mac     = dev and dev:mac(),
				type    = dev and dev:type(),
				name    = dev and dev:get_i18n(),
				ether   = link and link.type == 1
			}
		end

		if wan6 then
			local dev = wan6:get_interface()
			local link = dev and ipc.link(dev:name())
			rv.wan6 = {
				ip6addr   = wan6:ip6addr(),
				gw6addr   = wan6:gw6addr(),
				dns       = wan6:dns6addrs(),
				ip6prefix = wan6:ip6prefix(),
				uptime    = wan6:uptime(),
				proto     = wan6:proto(),
				i18n      = wan6:get_i18n(),
				ifname    = wan6:ifname(),
				link      = wan6:adminlink(),
				mac       = dev and dev:mac(),
				type      = dev and dev:type(),
				name      = dev and dev:get_i18n(),
				ether     = link and link.type == 1
			}
		end

		if has_dsl then
			local dsl_stat = luci.sys.exec("/etc/init.d/dsl_control lucistat")
			local dsl_func = loadstring(dsl_stat)
			if dsl_func then
				rv.dsl = dsl_func()
			end
		end

		luci.http.prepare_content("application/json")
		luci.http.write_json(rv)

		return
	end
-%>

<%+header%>

<script type="text/javascript">//<![CDATA[
	function progressbar(v, m)
	{
		var vn = parseInt(v) || 0;
		var mn = parseInt(m) || 100;
		var pc = Math.floor((100 / mn) * vn);

		return String.format(
			'<div style="width:100%%; max-width:200px; position:relative; border:1px solid #999999">' +
				'<div style="background-color:#CCCCCC; width:%d%%; height:15px">' +
					'<div style="position:absolute; left:0; top:0; text-align:center; width:100%%; color:#000000">' +
						'<small>%s / %s (%d%%)</small>' +
					'</div>' +
				'</div>' +
			'</div>', pc, v, m, pc
		);
	}

	function labelList(items, offset) {
		var rv = [ ];

		for (var i = offset || 0; i < items.length; i += 2) {
			var label = items[i],
			    value = items[i+1];

			if (value === undefined || value === null)
				continue;

			if (label)
				rv.push(E('strong', [label, ': ']));

			rv.push(value, E('br'));
		}

		return rv;
	}

	function renderBox(title, active, childs) {
		childs = childs || [];
		childs.unshift(E('span', labelList(arguments, 3)));

		return E('div', { class: 'ifacebox' }, [
			E('div', { class: 'ifacebox-head center ' + (active ? 'active' : '') },
				E('strong', title)),
			E('div', { class: 'ifacebox-body left' }, childs)
		]);
	}

	function renderBadge(icon, title) {
		return E('span', { class: 'ifacebadge' }, [
			E('img', { src: icon, title: title || '' }),
			E('span', labelList(arguments, 2))
		]);
	}

	XHR.poll(5, '<%=REQUEST_URI%>', { status: 1 },
		function(x, info)
		{
			var us = document.getElementById('upstream_status_table');

			while (us.lastElementChild)
				us.removeChild(us.lastElementChild);

			var ifc = info.wan || {};

			us.appendChild(renderBox(
				'<%:WAN - PPP%>',
				(ifc.ifname && ifc.proto != 'none'),
				[ E('div', {}, renderBadge(
					'<%=resource%>/icons/%s.png'.format((ifc && ifc.type) ? ifc.type : 'ethernet_disabled'), null,
					'<%:Device%>', ifc ? (ifc.name || ifc.ifname || '-') : '-',
					'<%:MAC-Address%>', (ifc && ifc.ether) ? ifc.mac : null)) ],
				'<%:Protocol%>', ifc.i18n || E('em', '<%:Not connected%>'),
				'<%:Address%>', (ifc.ipaddr) ? ifc.ipaddr : '0.0.0.0',
				'<%:Netmask%>', (ifc.netmask && ifc.netmask != ifc.ipaddr) ? ifc.netmask : '255.255.255.255',
				'<%:Gateway%>', (ifc.gwaddr) ? ifc.gwaddr : '0.0.0.0',
				'<%:DNS%> 1', (ifc.dns) ? ifc.dns[0] : null,
				'<%:DNS%> 2', (ifc.dns) ? ifc.dns[1] : null,
				'<%:DNS%> 3', (ifc.dns) ? ifc.dns[2] : null,
				'<%:DNS%> 4', (ifc.dns) ? ifc.dns[3] : null,
				'<%:DNS%> 5', (ifc.dns) ? ifc.dns[4] : null,
				'<%:Expires%>', (ifc.expires > -1) ? '%t'.format(ifc.expires) : null,
				'<%:Connected%>', (ifc.uptime > 0) ? '%t'.format(ifc.uptime) : null));

			var ifcLan = info.lan || {};

			us.appendChild(renderBox(
				'<%:LAN%>',
				(ifcLan.ifname && ifcLan.proto != 'none'),
				[ E('div', {}, renderBadge(
					'<%=resource%>/icons/%s.png'.format((ifcLan && ifcLan.type) ? ifcLan.type : 'ethernet_disabled'), null,
					'<%:Device%>', ifcLan ? (ifcLan.name || ifcLan.ifname || '-') : '-',
					'<%:MAC-Address%>', (ifcLan && ifcLan.ether) ? ifcLan.mac : null)) ],
				'<%:Protocol%>', ifcLan.i18n || E('em', '<%:Not connected%>'),
				'<%:Address%>', (ifcLan.ipaddr) ? ifcLan.ipaddr : '0.0.0.0',
				'<%:Netmask%>', (ifcLan.netmask && ifcLan.netmask != ifcLan.ipaddr) ? ifcLan.netmask : '255.255.255.255',
				'<%:Gateway%>', (ifcLan.gwaddr) ? ifcLan.gwaddr : '0.0.0.0',
				'<%:DNS%> 1', (ifcLan.dns) ? ifcLan.dns[0] : null,
				'<%:DNS%> 2', (ifcLan.dns) ? ifcLan.dns[1] : null,
				'<%:DNS%> 3', (ifcLan.dns) ? ifcLan.dns[2] : null,
				'<%:DNS%> 4', (ifcLan.dns) ? ifcLan.dns[3] : null,
				'<%:DNS%> 5', (ifcLan.dns) ? ifcLan.dns[4] : null,
				'<%:Expires%>', (ifcLan.expires > -1) ? '%t'.format(ifcLan.expires) : null,
				'<%:Connected%>', (ifcLan.uptime > 0) ? '%t'.format(ifcLan.uptime) : null));

			<% if has_dsl then %>
				var ds = document.getElementById('dsl_status_table');

				while (ds.lastElementChild)
					ds.removeChild(ds.lastElementChild);

				ds.appendChild(renderBox(
					'<%:DSL Status%>',
					(info.dsl.line_state === 'UP'), [ ],
					'<%:Line State%>', '%s [0x%x]'.format(info.dsl.line_state, info.dsl.line_state_detail),
					'<%:Line Mode%>', info.dsl.line_mode_s || '-',
					'<%:Line Uptime%>', info.dsl.line_uptime_s || '-',
					'<%:Annex%>', info.dsl.annex_s || '-',
					'<%:Profile%>', info.dsl.profile_s || '-',
					'<%:Data Rate%>', '%s/s / %s/s'.format(info.dsl.data_rate_down_s, info.dsl.data_rate_up_s),
					'<%:Max. Attainable Data Rate (ATTNDR)%>', '%s/s / %s/s'.format(info.dsl.max_data_rate_down_s, info.dsl.max_data_rate_up_s),
					'<%:Latency%>', '%s / %s'.format(info.dsl.latency_num_down, info.dsl.latency_num_up),
					'<%:Line Attenuation (LATN)%>', '%.1f dB / %.1f dB'.format(info.dsl.line_attenuation_down, info.dsl.line_attenuation_up),
					'<%:Signal Attenuation (SATN)%>', '%.1f dB / %.1f dB'.format(info.dsl.signal_attenuation_down, info.dsl.signal_attenuation_up),
					'<%:Noise Margin (SNR)%>', '%.1f dB / %.1f dB'.format(info.dsl.noise_margin_down, info.dsl.noise_margin_up),
					'<%:Aggregate Transmit Power(ACTATP)%>', '%.1f dB / %.1f dB'.format(info.dsl.actatp_down, info.dsl.actatp_up),
					'<%:Forward Error Correction Seconds (FECS)%>', '%d / %d'.format(info.dsl.errors_fec_near, info.dsl.errors_fec_far),
					'<%:Errored seconds (ES)%>', '%d / %d'.format(info.dsl.errors_es_near, info.dsl.errors_es_far),
					'<%:Severely Errored Seconds (SES)%>', '%d / %d'.format(info.dsl.errors_ses_near, info.dsl.errors_ses_far),
					'<%:Loss of Signal Seconds (LOSS)%>', '%d / %d'.format(info.dsl.errors_loss_near, info.dsl.errors_loss_far),
					'<%:Unavailable Seconds (UAS)%>', '%d / %d'.format(info.dsl.errors_uas_near, info.dsl.errors_uas_far),
					'<%:Header Error Code Errors (HEC)%>', '%d / %d'.format(info.dsl.errors_hec_near, info.dsl.errors_hec_far),
					'<%:Non Pre-emtive CRC errors (CRC_P)%>', '%d / %d'.format(info.dsl.errors_crc_p_near, info.dsl.errors_crc_p_far),
					'<%:Pre-emtive CRC errors (CRCP_P)%>', '%d / %d'.format(info.dsl.errors_crcp_p_near, info.dsl.errors_crcp_p_far),
					'<%:ATU-C System Vendor ID%>', info.dsl.atuc_vendor_id,
					'<%:Power Management Mode%>', info.dsl.power_mode_s));
			<% end %>

			<% if has_wifi then %>
			var ws = document.getElementById('wifi_status_table');
			if (ws)
			{
				while (ws.lastElementChild)
					ws.removeChild(ws.lastElementChild);

				for (var didx = 0; didx < info.wifinets.length; didx++)
				{
					var dev = info.wifinets[didx];
					var net0 = (dev.networks && dev.networks[0]) ? dev.networks[0] : {};
					var vifs = [];

					for (var nidx = 0; nidx < dev.networks.length; nidx++)
					{
						var net = dev.networks[nidx];
						var is_assoc = (net.bssid != '00:00:00:00:00:00' && net.channel && !net.disabled);

						var icon;
						if (net.disabled)
							icon = "<%=resource%>/icons/signal-none.png";
						else if (net.quality <= 0)
							icon = "<%=resource%>/icons/signal-0.png";
						else if (net.quality < 25)
							icon = "<%=resource%>/icons/signal-0-25.png";
						else if (net.quality < 50)
							icon = "<%=resource%>/icons/signal-25-50.png";
						else if (net.quality < 75)
							icon = "<%=resource%>/icons/signal-50-75.png";
						else
							icon = "<%=resource%>/icons/signal-75-100.png";

						vifs.push(renderBadge(
							icon,
							'<%:Signal%>: %d dBm / <%:Quality%>: %d%%'.format(net.signal, net.quality),
							'<%:SSID%>', E('a', { href: net.link }, [ net.ssid || '?' ]),
							'<%:Mode%>', net.mode,
							'<%:BSSID%>', is_assoc ? (net.bssid || '-') : null,
							'<%:Encryption%>', is_assoc ? net.encryption : null,
							'<%:Associations%>', is_assoc ? (net.num_assoc || '-') : null,
							null, is_assoc ? null : E('em', net.disabled ? '<%:Wireless is disabled%>' : '<%:Wireless is not associated%>')));
					}

					ws.appendChild(renderBox(
						dev.device, dev.up || net0.up,
						[ E('div', vifs) ],
						'<%:Type%>', dev.name.replace(/^Generic | Wireless Controller .+$/g, ''),
						'<%:Channel%>', net0.channel ? '%d (%.3f <%:GHz%>)'.format(net0.channel, net0.frequency) : '-',
						'<%:Bitrate%>', net0.bitrate ? '%d <%:Mbit/s%>'.format(net0.bitrate) : '-'));
				}

				if (!ws.lastElementChild)
					ws.appendChild(E('<em><%:No information available%></em>'));
			}
			<% end %>

			var e;

			if (e = document.getElementById('localtime'))
				e.innerHTML = info.localtime;

			if (e = document.getElementById('uptime'))
				e.innerHTML = String.format('%t', info.uptime);

			if (e = document.getElementById('Smstatus'))
				e.innerHTML = info.mStats[0].SmStat;

			if (e = document.getElementById('Ntwtatus'))
				e.innerHTML = info.mStats[0].NwStat;

			if (e = document.getElementById('sigStr'))
			{
				var icon;
				var q = (info.mStats[0].SgStr);
				if (q == 0)
					icon = "<%=resource%>/icons/signal-0.png";
				else if (q < 8)
					icon = "<%=resource%>/icons/signal-0-25.png";
				else if (q < 16)
					icon = "<%=resource%>/icons/signal-25-50.png";
				else if (q < 24)
					icon = "<%=resource%>/icons/signal-50-75.png";
				else if (q > 23 && q < 33)
					icon = "<%=resource%>/icons/signal-75-100.png";
				else
					icon = "<%=resource%>/icons/signal-none.png";

				e.innerHTML = String.format( '%s	<img src="%s"/>',info.mStats[0].SgStr,icon);
			}

			if (e = document.getElementById('oprName'))
				e.innerHTML = info.mStats[0].OptrName;

			if (e = document.getElementById('regIn'))
				e.innerHTML = info.mStats[0].SmRegIn;

			if (e = document.getElementById('IMei'))
				e.innerHTML = info.mStats[0].ImeI;

			if (e = document.getElementById('IMsi'))
				e.innerHTML = info.mStats[0].ImsI;

		}
	);
//]]></script>

<h2 name="content"><%:Status%></h2>

<div class="cbi-section">
	<h3><%:Product%></h3>

	<div class="table" width="100%">
		<div class="tr"><div class="td left" width="33%"><%:Name%></div><div class="td left"><%=devInfo.productName or "?"%></div></div>
		<div class="tr"><div class="td left" width="33%"><%:Model%></div><div class="td left"><%=devInfo.productName or "?"%></div></div>
		<div class="tr"><div class="td left" width="33%"><%:Manufacturer%></div><div class="td left"><%=devInfo.company or "?"%></div></div>
		<div class="tr"><div class="td left" width="33%"><%:Firmware Version%></div><div class="td left"><%=devInfo.FwVersion%></div></div>
		<div class="tr"><div class="td left" width="33%"><%:Kernel Version%></div><div class="td left"><%=unameinfo.release or "?"%></div></div>
		<div class="tr"><div class="td left" width="33%"><%:Local Time%></div><div class="td left" id="localtime">-</div></div>
		<div class="tr"><div class="td left" width="33%"><%:Uptime%></div><div class="td left" id="uptime">-</div></div>
	</div>
</div>

<div class="cbi-section">
	<h3><%:Cellular%></h3>

	<div class="table" width="100%">
		<div class="tr"><div class="td left" width="33%"><%:SIM Status%></div><div class="td left" id="Smstatus"><%:Collecting data...%></div></div>
		<div class="tr"><div class="td left" width="33%"><%:Network Status%></div><div class="td left" id="Ntwtatus"><%:Collecting data...%></div></div>
		<div class="tr"><div class="td left" width="33%"><%:Signal Strength%></div><div class="td left" id="sigStr"><%:Collecting data...%></div></div>
		<div class="tr"><div class="td left" width="33%"><%:Operator Name%></div><div class="td left" id="oprName"><%:Collecting data...%></div></div>
		<div class="tr"><div class="td left" width="33%"><%:Registered In%></div><div class="td left" id="regIn"><%:Collecting data...%></div></div>
		<div class="tr"><div class="td left" width="33%"><%:IMEI%></div><div class="td left" id="IMei"><%:Collecting data...%></div></div>
		<div class="tr"><div class="td left" width="33%"><%:IMSI%></div><div class="td left" id="IMsi"><%:Collecting data...%></div></div>
	</div>
</div>

<div class="cbi-section">
	<h3><%:Network%></h3>

	<div id="upstream_status_table" class="network-status-table">
		<p><em><%:Collecting data...%></em></p>
	</div>
</div>

<% if has_wifi then %>
<div class="cbi-section">
	<h3><%:Wireless%></h3>

	<div id="wifi_status_table" class="network-status-table">
		<p><em><%:Collecting data...%></em></p>
	</div>
</div>

<div class="cbi-section">
	<h3><%:Associated Stations%></h3>

	<%+admin_network/wifi_assoclist%>
</div>
<% end %>

<%
	if has_dhcp then
		include("admin_network/lease_status")
	end
%>

<% if has_dsl then %>
<div class="cbi-section">
	<h3><%:DSL%></h3>

	<div id="dsl_status_table" class="network-status-table">
		<p><em><%:Collecting data...%></em></p>
	</div>
</div>
<% end %>

<%-
	local incdir = util.libpath() .. "/view/admin_status/index/"
	if fs.access(incdir) then
		local inc
		for inc in fs.dir(incdir) do
			if inc:match("%.htm$") then
				include("admin_status/index/" .. inc:gsub("%.htm$", ""))
			end
		end
	end
-%>

<%+footer%>
